# See examples/bin/install-dev-tools.sh for an example script to install all
# of the tools needed by this config. You can copy it into your project and
# modify it as needed to only install the tools you need.
[commands.golangci-lint]
type = "lint"
include = "**/*.go"
run_mode = "dirs"
cmd = [
    "golangci-lint",
    "run",
    "-c",
    "$PRECIOUS_ROOT/golangci-lint.yml",
    # Allowing golangci-lint to run in parallel reduces the effectiveness of
    # its cache when it has to parse the same code repeatedly. Depending on
    # the structure of your repo, you may get a better result by using the
    # `--allow-serial-runners` flag instead. However, you must use one of
    # these, as by default golangci-lint can simply timeout and fail when
    # multiple instances of the executable as invoked at the same time for the
    # same project.
    "--allow-parallel-runners",
]
env = { "FAIL_ON_WARNINGS" = "1" }
ok_exit_codes = [0]
lint_failure_exit_codes = [1]

[commands.goimports]
type = "tidy"
include = "**/*.go"
cmd = [
    "golangci-lint",
    "run",
    "--fix",
    "--disable-all",
    "--enable", "goimports",
    "--allow-parallel-runners",
]
ok_exit_codes = [0]

# See check-go-mod.sh in helpers dir
[commands.check-go-mod]
type = "lint"
include = "**/*.go"
run_mode = "root"
chdir = true
cmd = ["$PRECIOUS_ROOT/dev/bin/check-go-mod.sh"]
ok_exit_codes = [0]
lint_failure_exit_codes = [1]

[commands.omegasort-gitignore]
type = "both"
include = "**/.gitignore"
cmd = [ "omegasort", "--sort", "path" ]
lint_flags = "--check"
tidy_flags = "--in-place"
ok_exit_codes = 0
lint_failure_exit_codes = 1
ignore_stderr = [
    "The .+ file is not sorted",
    "The .+ file is not unique",
]
