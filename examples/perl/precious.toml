# See examples/bin/install-dev-tools.sh for an example script to install all
# of the tools needed by this config. You can copy it into your project and
# modify it as needed to only install the tools you need.

# This list is appropriate for a Perl distribution that you upload to
# CPAN. For Perl applications you develop locally, you can probably remove
# most or all of these.
exclude = [
    # Used by Dist::Zilla
    ".build/**",
    # Replace with your distro name
    "DateTime-*",
    "blib/**",
    # All of these are generated by Dist::Zilla
    "t/00-*",
    "t/author-*",
    "t/release-*",
    "xt/author/**",
    "xt/release/**",
]

# Add Perl::Critic as a develop phase prereq
[commands.perlcritic]
type = "lint"
include = [ "**/*.{pl,pm,t,psgi}" ]
cmd = [ "perlcritic", "--profile=$PRECIOUS_ROOT/perlcriticrc" ]
ok_exit_codes = 0
lint_failure_exit_codes = 2

# Add Perl::Tidy as a develop phase prereq
[commands.perltidy]
type = "both"
include = [ "**/*.{pl,pm,t,psgi}" ]
cmd = [ "perltidy", "--profile=$PRECIOUS_ROOT/perltidyrc" ]
lint_flags = [ "--assert-tidy", "--no-standard-output", "--outfile=/dev/null" ]
tidy_flags = [ "--backup-and-modify-in-place", "--backup-file-extension=/" ]
ok_exit_codes = 0
lint_failure_exit_codes = 2
ignore_stderr = "Begin Error Output Stream"

# Add App::perlimports as a develop phase prereq
[commands.perlimports]
type = "both"
include = [ "**/*.{pl,pm,t,psgi}" ]
cmd = [ "perlimports" ]
lint_flags = ["--lint" ]
tidy_flags = ["-i" ]
ok_exit_codes = 0
expect_stderr = true

# Add Pod::Checker as a develop phase prereq
[commands.podchecker]
type = "lint"
include = [ "**/*.{pl,pm,pod}" ]
cmd = [ "podchecker", "--warnings", "--warnings" ]
ok_exit_codes = [ 0, 2 ]
lint_failure_exit_codes = 1
ignore_stderr = [
    ".+ pod syntax OK",
    ".+ does not contain any pod commands",
]

# Add Pod::Tidy as a develop phase prereq
[commands.podtidy]
type = "tidy"
include = [ "**/*.{pl,pm,pod}" ]
cmd = [ "podtidy", "--columns", "80", "--inplace", "--nobackup" ]
ok_exit_codes = 0
lint_failure_exit_codes = 1

[commands.omegasort-gitignore]
type = "both"
include = "**/.gitignore"
cmd = [ "omegasort", "--sort", "path", "--unique" ]
lint_flags = "--check"
tidy_flags = "--in-place"
ok_exit_codes = 0
lint_failure_exit_codes = 1
ignore_stderr = [
    "The .+ file is not sorted",
    "The .+ file is not unique",
]

# If you have an external stopwords file for use with Test::Spelling
[commands.omegasort-stopwords]
type = "both"
include = ".stopwords"
cmd = [ "omegasort", "--sort", "text", "--case-insensitive", "--unique" ]
lint_flags = "--check"
tidy_flags = "--in-place"
ok_exit_codes = 0
lint_failure_exit_codes = 1
ignore_stderr = [
    "The .+ file is not sorted",
    "The .+ file is not unique",
]
